/*
* Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.
*
* Note:
*
* The same word in the dictionary may be reused multiple times in the segmentation.
* You may assume the dictionary does not contain duplicate words.
* Example 1:
* 
* Input: s = "leetcode", wordDict = ["leet", "code"]
* Output: true
* Explanation: Return true because "leetcode" can be segmented as "leet code".
* Example 2:
* 
* Input: s = "applepenapple", wordDict = ["apple", "pen"]
* Output: true
* Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
*              Note that you are allowed to reuse a dictionary word.
* Example 3:
* 
* Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
* Output: false
*/


class WordBreak {
    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> set = new HashSet<>();
        for(String st : wordDict){
            set.add(st);
        }
        
        Map<String, Boolean> map = new HashMap<>();
        return helper(s, set, map);
    }
    
    private boolean helper(String s, Set<String> set, Map<String, Boolean> map){
        if(set.contains(s)){
            return true;
        }
        if(map.containsKey(s)){
            return map.get(s);
        }
        
        for(int i = 0; i < s.length(); i++){
            String subsString = s.substring(0, i);
            if(set.contains(subsString) && helper(s.substring(i), set, map)){
                map.put(s, true);
                return map.get(s);
            }
        }
         
        map.put(s, false);
        return map.get(s);
        
    }
}
