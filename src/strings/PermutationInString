/**
* Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. 
* In other words, one of the first string's permutations is the substring of the second string.

* Example 1:
* Input: s1 = "ab" s2 = "eidbaooo"
* Output: True
* Explanation: s2 contains one permutation of s1 ("ba").
* 
* Example 2:
* Input:s1= "ab" s2 = "eidboaoo"
* Output: False
*
**/


class PermutationInString {
    public boolean checkInclusion(String s1, String s2) {
        
        int[] arr1 = new int[26];
        
        for(int i = 0; i < s1.length(); i++){
            arr1[s1.charAt(i) - 'a']++;
        }
        
        int[] arr2 = new int[26];
        for(int i = 0; i < s2.length(); i++){
            arr2[s2.charAt(i) - 'a']++;
            if(i >= s1.length()){
                arr2[s2.charAt(i-s1.length()) - 'a']--;
            }
            if(Arrays.equals(arr1, arr2)){
                return true;
            }
        }
	    return false;
    }
}
