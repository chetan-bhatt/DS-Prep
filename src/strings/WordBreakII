/*
* Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.
*
* Note:
* The same word in the dictionary may be reused multiple times in the segmentation.
* You may assume the dictionary does not contain duplicate words.
* Example 1:
* 
* Input:
* s = "catsanddog"
* wordDict = ["cat", "cats", "and", "sand", "dog"]
* Output:
* [
*   "cats and dog",
*   "cat sand dog"
* ]
* Example 2:
* 
* Input:
* s = "pineapplepenapple"
* wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
* Output:
* [
*   "pine apple pen apple",
*   "pineapple pen apple",
*   "pine applepen apple"
* ]
* Explanation: Note that you are allowed to reuse a dictionary word.
*/

class WordBreakII {
    public List<String> wordBreak(String s, List<String> wordDict) {
        Set<String> set = new HashSet<>();
        for(String word: wordDict){
            set.add(word);
        }
        
        Map<String, List<String>> map = new HashMap<>();
        return helper(s, set, map);
        
    }
    
    private List<String> helper(String s, Set<String> set, Map<String, List<String>> map){
        if(map.containsKey(s)){
            return map.get(s);
        }
        
        List<String> result = new ArrayList<>();
        
        if(set.contains(s)){
            result.add(s);
        }
        
        for(int i = 0; i < s.length(); i++){
            String left = s.substring(0, i);
            if(set.contains(left)){
                List<String> sl = helper(s.substring(i), set, map);
                    for(String st : sl){
                        result.add(left + " " + st);
                    }
                
            }
        }
        map.put(s, result);
        return map.get(s);
    }
}
